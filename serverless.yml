service: patient-api

plugins:
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters
  - serverless-dotenv-plugin

custom:
  certificateName:
    local: '*.gracemedicalvillagedev.com'
    development: '*.gracemedicalvillagedev.com'
    production: '*.gracemedicalvillage.com'
  cognitoArn:
    local: arn:aws:cognito-idp:us-east-1:435765244332:userpool/us-east-1_Pku3BZzNi
    development: arn:aws:cognito-idp:us-east-1:435765244332:userpool/us-east-1_Pku3BZzNi
    production: '' # todo
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: ''
    certificateName: ${self:custom.certificateName.${self:custom.stage}}
    createRoute53Record: true
    endpointType: edge
    securityPolicy: tls_1_2
    stage: ${self:custom.stage}
  deployTable: false
  domains:
    development: api.gracemedicalvillagedev.com
    production: api.gracemedicalvillage.com
  dynamodb:
    start:
      dir: offline
      inMemory: true
      migrate: true
      seed: true
    migration:
      dir: './resources/dynamoTable.json'
      port: 8000
    seed:
      patients:
        sources:
          - table: patients
            sources: [./resources/patients.json]
    stages:
      - local
      - test
  prefix: gmv
  restApiId:
    development: 'tb62ntz7g2'
    production: '' # todo
  serverless-offline:
    httpPort: 4000
  stage: ${opt:stage, self:provider.stage}
  tableName: patients

package:
  individually: true

provider:
  name: aws
  region: us-east-1
  runtime: nodejs12.x
  stage: ${provider.stage, 'development'}
  environment:
    stage: ${self:custom.stage}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.tableName}'
  tracing:
    apigateway: true
    lambda: true

functions:
  get-data:
    handler: build/get.main
    timeout: 10
    events:
      - http:
          path: patient
          method: get
          cors: true
          integration: lambda
          authorizer:
            name: cognito_auth
            arn: ${self:custom.cognitoArn.${self:custom.stage}}

  query-data:
    handler: build/query.main
    timeout: 20
    events:
      - http:
          path: patients
          method: get
          cors: true
          integration: lambda
          authorizer:
            name: cognito_auth
            arn: ${self:custom.cognitoArn.${self:custom.stage}}

  post-data:
    handler: build/post.main
    timeout: 10
    events:
      - http:
          path: patient
          method: post
          cors: true
          integration: lambda
          authorizer:
            name: cognito_auth
            arn: ${self:custom.cognitoArn.${self:custom.stage}}

  put-data:
    handler: build/put.main
    timeout: 10
    events:
      - http:
          path: patient
          method: put
          cors: true
          integration: lambda
          authorizer:
            name: cognito_auth
            arn: ${self:custom.cognitoArn.${self:custom.stage}}

  delete-data:
    handler: build/delete.main
    timeout: 10
    events:
      - http:
          path: patient
          method: delete
          cors: true
          integration: lambda
          authorizer:
            name: cognito_auth
            arn: ${self:custom.cognitoArn.${self:custom.stage}}

resources:
  Conditions:
    DeployPatientsTable:
      Fn::Equals:
        - ${self:custom.deployTable}
        - true

  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: ${self:custom.restApiId.${self:custom.stage}}

    PatientsTable:
      Type: AWS::DynamoDB::Table
      Condition: DeployPatientsTable
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
