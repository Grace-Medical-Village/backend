service: gmv-patient-api

plugins:
  - serverless-dynamodb-local
  - serverless-offline
custom:
  dynamodb:
    start:
      dir: offline
      inMemory: true
      migrate: true
      seed: true
    migration:
      port: 8000
    seed:
      domain:
        sources:
          - table: patients
            sources: [./resources/patients.json]
    stages:
      - dev
      - test
  prefix: gmv
  serverless-offline:
    httpPort: 4000
  tableName: patients

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  tracing:
    apigateway: true
    lambda: true

  environment:
    stage: ${self:provider.stage}

  newPatientIamRole:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
      Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:custom.tableName}'

  # apiGateway:
  #   restApiId:
  #     'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiId
  #   restApiRootResourceId:
  #     'Fn::ImportValue': ${self:custom.stage}-ExtApiGatewayRestApiRootResourceId

functions:
  getPatient:
    handler: src/get.main
    events:
      - http:
          path: patient
          method: get
          cors: true
          authorizer: aws_iam

  newPatient:
    handler: src/post.main
    events:
      - http:
          path: patient
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: ${self:custom.tableName}

resources:
  Resources:
    PatientsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.tableName}
