service: patient-api

plugins:
  - serverless-domain-manager
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  domains:
    development: api.gracemedicalvillagedev.com
    production: api.gracemedicalvillage.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: patients
    stage: ${self:custom.stage}
    createRoute53Record: true
  deployTable: false
  dynamodb:
    start:
      dir: offline
      inMemory: true
      migrate: true
      seed: true
    migration:
      dir: './resources/dynamoTable.json'
      port: 8000
    seed:
      patients:
        sources:
          - table: patients
            sources: [./resources/patients.json]
      # medications:
      #   sources:
      #     - table: patients
      #       sources: [./resources/medications.json]
      metrics:
        sources:
          - table: patients
            sources: [./resources/metrics.json]
    stages:
      - local
      - test
  prefix: gmv
  serverless-offline:
    httpPort: 4000
  stage: ${opt:stage, self:provider.stage}
  tableName: patients

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${provider.stage, 'development'}
  region: us-east-1
  tracing:
    apigateway: true
    lambda: true
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 'arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/${self:custom.tableName}'
  environment:
    stage: ${self:custom.stage}

functions:
  get-patient-data:
    handler: api/build/get.main
    events:
      - http:
          path: patients
          method: get
          cors: true
          authorizer: aws_iam

  put-patient-data:
    handler: api/build/put.main
    events:
      - http:
          path: patients
          method: post
          cors: true
          authorizer: aws_iam
    environment:
      TABLE_NAME: ${self:custom.tableName}

resources:
  Conditions:
    DeployPatientsTable:
      Fn::Equals:
        - ${self:custom.deployTable}
        - true

  Resources:
    patientsTable:
      Type: AWS::DynamoDB::Table
      Condition: DeployPatientsTable
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: key
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
